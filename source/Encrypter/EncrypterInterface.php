<?php
/**
 * Spiral Framework.
 *
 * @license   MIT
 * @author    Anton Titov (Wolfy-J)
 * @copyright Â©2009-2015
 */
namespace Spiral\Encrypter;

interface EncrypterInterface
{
    /**
     * Generate a pseudo-random string of bytes.
     *
     * @link http://php.net/manual/en/function.openssl-random-pseudo-bytes.php
     * @param int  $length   Required string length (count bytes).
     * @param bool $passWeak Do not throw an exception if result is "weak". Not recommended.
     * @return string
     * @throws EncrypterException
     */
    public function random($length, $passWeak = false);

    /**
     * Encrypt given data (any serializable) using current encryption cipher, mode and key. Data will
     * be base64 encoded and signed. Use additional parameter to make output URL friendly. Result will
     * be encrypted string packed with signature and vector.
     *
     * @link http://stackoverflow.com/questions/1374753/passing-base64-encoded-strings-in-url
     * @param mixed $data Data to be encrypted.
     * @return string
     * @throws EncrypterException
     */
    public function encrypt($data);

    /**
     * Decrypt previously data, verify signature and return it. All Encryption options should be
     * identical to values used during encryption.
     *
     * @link http://php.net/manual/en/function.mcrypt-decrypt.php
     * @param string $packed Packed string generated by Encrypter->encrypt().
     * @return mixed
     * @throws DecryptionException
     */
    public function decrypt($packed);
}